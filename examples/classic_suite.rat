module demo.practice_suite

const SAMPLE_SORT_DATA = [9, 4, 6, 2, 8]
const SEARCH_SPACE = [3, 7, 9, 11, 14, 19, 23, 28]
const COLLATZ_SEEDS = [3, 6, 11]
const ARMSTRONG_CHECKS = [0, 1, 153, 370, 407, 808]
const BRACKET_CASES = ["(()())", "((())", "rat(lang)", "(()(()))", "(()))("]
const FIZZ_BUZZ_LIMIT = 20
const SEARCH_TARGETS = [9, 14, 25]

fn swap_if_needed(left: int, right: int) -> Dict[str, int]
  if left > right
    { "first": right, "second": left }
  else
    { "first": left, "second": right }

fn bubble_sort_sample(values: List[int]) -> List[int]
  var s0 = values[0]
  var s1 = values[1]
  var s2 = values[2]
  var s3 = values[3]
  var s4 = values[4]
  var pass = 0
  while pass < 5
    let pair01 = swap_if_needed(s0, s1)
    s0 = pair01.first
    s1 = pair01.second
    let pair12 = swap_if_needed(s1, s2)
    s1 = pair12.first
    s2 = pair12.second
    let pair23 = swap_if_needed(s2, s3)
    s2 = pair23.first
    s3 = pair23.second
    let pair34 = swap_if_needed(s3, s4)
    s3 = pair34.first
    s4 = pair34.second
    pass = pass + 1
  [s0, s1, s2, s3, s4]

fn binary_search(values: List[int], target: int) -> int
  var low = 0
  var high = len(values) - 1
  while low <= high
    let mid = (low + high) / 2
    let probe = values[mid]
    if probe == target
      return mid
    if probe < target
      low = mid + 1
    else
      high = mid - 1
  -1

fn abs_int(value: int) -> int
  if value < 0
    -value
  else
    value

fn factorial_iter(n: int) -> int
  var idx = 1
  var total = 1
  while idx <= n
    total = total * idx
    idx = idx + 1
  total

fn fibonacci_iter(n: int) -> int
  if n <= 1
    return n
  var prev = 0
  var curr = 1
  var idx = 1
  while idx < n
    let next = prev + curr
    prev = curr
    curr = next
    idx = idx + 1
  curr

fn gcd(a: int, b: int) -> int
  var x = abs_int(a)
  var y = abs_int(b)
  while y != 0
    let rem = x % y
    x = y
    y = rem
  x

fn lcm(a: int, b: int) -> int
  if a == 0 || b == 0
    0
  else
    let product = abs_int(a) * abs_int(b)
    product / gcd(a, b)

fn collatz_steps(seed: int) -> int
  if seed <= 0
    return 0
  var current = seed
  var steps = 0
  while current != 1
    if current % 2 == 0
      current = current / 2
    else
      current = current * 3 + 1
    steps = steps + 1
  steps

fn sum_of_digits(value: int) -> int
  var n = abs_int(value)
  var total = 0
  if n == 0
    return 0
  while n > 0
    total = total + (n % 10)
    n = n / 10
  total

fn reverse_number(value: int) -> int
  var n = abs_int(value)
  var digits = 0
  while n > 0
    digits = digits * 10 + (n % 10)
    n = n / 10
  if value < 0
    -digits
  else
    digits

fn int_pow(base: int, exp: int) -> int
  var result = 1
  var count = 0
  while count < exp
    result = result * base
    count = count + 1
  result

fn count_digits(value: int) -> int
  if value == 0
    return 1
  var n = abs_int(value)
  var digits = 0
  while n > 0
    digits = digits + 1
    n = n / 10
  digits

fn is_armstrong(value: int) -> bool
  if value < 0
    return false
  let digits = count_digits(value)
  var n = value
  var total = 0
  while n > 0
    let digit = n % 10
    total = total + int_pow(digit, digits)
    n = n / 10
  total == value

fn parentheses_balanced(text: str) -> bool
  var depth = 0
  for ch in text
    if ch == "("
      depth = depth + 1
    else
      if ch == ")"
        depth = depth - 1
        if depth < 0
          return false
  depth == 0

fn fizz_buzz(limit: int)
  var n = 1
  while n <= limit
    if n % 15 == 0
      print("FizzBuzz:", n)
    else
      if n % 3 == 0
        print("Fizz:", n)
      else
        if n % 5 == 0
          print("Buzz:", n)
        else
          print("Number:", n)
    n = n + 1

fn multiplication_table(size: int)
  var row = 1
  while row <= size
    print("row", row)
    var col = 1
    while col <= size
      print("  ", row, "x", col, "=", row * col)
      col = col + 1
    row = row + 1

fn triangle_numbers(levels: int)
  var level = 1
  while level <= levels
    var total = 0
    var idx = 1
    while idx <= level
      total = total + idx
      idx = idx + 1
    print("triangle", level, "->", total)
    level = level + 1

fn bubble_sort_demo()
  print("bubble sort demo ->", SAMPLE_SORT_DATA)
  let sorted = bubble_sort_sample(SAMPLE_SORT_DATA)
  print("sorted result ->", sorted)

fn search_demo()
  print("binary search demo -> space:", SEARCH_SPACE)
  for needle in SEARCH_TARGETS
    let pos = binary_search(SEARCH_SPACE, needle)
    if pos >= 0
      print("  target", needle, "found at index", pos)
    else
      print("  target", needle, "not found")

fn numeric_demo()
  print("factorial 6 ->", factorial_iter(6))
  print("fibonacci 9 ->", fibonacci_iter(9))
  print("gcd(84, 126) ->", gcd(84, 126))
  print("lcm(21, 6) ->", lcm(21, 6))
  print("sum of digits 98765 ->", sum_of_digits(98765))
  print("reverse number 12340 ->", reverse_number(12340))

fn collatz_demo()
  print("collatz steps:")
  for seed in COLLATZ_SEEDS
    print("  seed", seed, "->", collatz_steps(seed), "steps")

fn armstrong_demo()
  print("armstrong numbers:")
  for candidate in ARMSTRONG_CHECKS
    var verdict = "no"
    if is_armstrong(candidate)
      verdict = "yes"
    print("  ", candidate, "->", verdict)

fn bracket_demo()
  print("parentheses balance checks:")
  for sample in BRACKET_CASES
    let ok = parentheses_balanced(sample)
    print("  ", sample, "->", ok)

fn fizz_buzz_demo()
  print("fizz buzz up to", FIZZ_BUZZ_LIMIT)
  fizz_buzz(FIZZ_BUZZ_LIMIT)

fn tables_demo()
  print("multiplication table (up to 5):")
  multiplication_table(5)
  print("triangle numbers up to 6:")
  triangle_numbers(6)

fn main(args: List[str]) -> int
  print("=== Ratlang practice suite ===")
  print("received", len(args), "arg(s)")
  bubble_sort_demo()
  search_demo()
  numeric_demo()
  collatz_demo()
  armstrong_demo()
  bracket_demo()
  fizz_buzz_demo()
  tables_demo()
  print("args:", args)
  0
