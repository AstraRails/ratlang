module demo.production_dashboard

const TASKS = [
  { "id": 101, "title": "bootstrap CLI", "owner": "Remy", "status": "in-progress", "score": 82, "estimate": 12 },
  { "id": 102, "title": "package manager", "owner": "Lang", "status": "todo", "score": 74, "estimate": 18 },
  { "id": 103, "title": "formatter", "owner": "Remy", "status": "blocked", "score": 91, "estimate": 10 },
  { "id": 104, "title": "docs portal", "owner": "Jules", "status": "in-progress", "score": 63, "estimate": 14 },
  { "id": 105, "title": "release runner", "owner": "Mira", "status": "done", "score": 55, "estimate": 6 },
  { "id": 106, "title": "language tour", "owner": "Mira", "status": "todo", "score": 47, "estimate": 9 }
]

const CAPACITY = [
  { "name": "Remy", "hours": 6 },
  { "name": "Lang", "hours": 5 },
  { "name": "Jules", "hours": 4 },
  { "name": "Mira", "hours": 5 }
]

const BURNDOWN = [132, 120, 108, 96, 82, 70, 55, 37, 24, 12]
const INCIDENT_LOG = [
  { "day": 1, "incidents": 0, "duration": 0 },
  { "day": 2, "incidents": 1, "duration": 2 },
  { "day": 3, "incidents": 2, "duration": 5 },
  { "day": 4, "incidents": 1, "duration": 1 },
  { "day": 5, "incidents": 0, "duration": 0 },
  { "day": 6, "incidents": 3, "duration": 6 }
]
const RELEASE_TARGET = 30

fn severity_from_score(score: int) -> str
  if score >= 90
    "blocker"
  else if score >= 70
    "critical"
  else if score >= 40
    "major"
  else
    "normal"

fn classify_task(task) -> str
  let severity = severity_from_score(task.score)
  if task.status == "done"
    "completed " + severity
  else if task.status == "in-progress"
    "active " + severity
  else if task.status == "blocked"
    "blocked " + severity
  else
    "queued " + severity

fn summarize_tasks(tasks) -> Dict[str, int]
  var todo = 0
  var active = 0
  var blocked = 0
  var done = 0
  var hours = 0
  for task in tasks
    if task.status == "done"
      done = done + 1
    else if task.status == "blocked"
      blocked = blocked + 1
    else if task.status == "in-progress"
      active = active + 1
    else
      todo = todo + 1
    hours = hours + task.estimate
  {
    "todo": todo,
    "active": active,
    "blocked": blocked,
    "done": done,
    "hours": hours
  }

fn team_capacity() -> int
  var total = 0
  for member in CAPACITY
    total = total + member.hours
  total

fn forecast_days(remaining_hours: int) -> int
  let per_day = team_capacity()
  if per_day == 0
    return 0
  var backlog = remaining_hours
  var days = 0
  while backlog > 0
    backlog = backlog - per_day
    days = days + 1
  days

fn burndown_direction(values: List[int]) -> str
  if len(values) < 2
    return "steady"
  let last_idx = len(values) - 1
  let prev_idx = len(values) - 2
  let last = values[last_idx]
  let prev = values[prev_idx]
  if last < prev
    "down"
  else if last == prev
    "flat"
  else
    "up"

fn recent_velocity(values: List[int]) -> int
  if len(values) < 2
    return 0
  let last_idx = len(values) - 1
  values[last_idx - 1] - values[last_idx]

fn incident_burden(logs) -> Dict[str, int]
  var total = 0
  var longest = 0
  var worst_day = 0
  for entry in logs
    total = total + entry.duration
    if entry.duration > longest
      longest = entry.duration
      worst_day = entry.day
  {
    "total": total,
    "longest": longest,
    "worst": worst_day
  }

fn report_tasks()
  print("== task portfolio ==")
  let stats = summarize_tasks(TASKS)
  print("todo:", stats.todo, "active:", stats.active, "blocked:", stats.blocked, "done:", stats.done)
  print("estimated hours:", stats.hours, "team capacity per day:", team_capacity())
  print("-- task details --")
  for task in TASKS
    let label = classify_task(task)
    print("  #", task.id, task.title, "@", task.owner, "->", label, "eta", task.estimate, "h")

fn report_forecast()
  print("== release forecast ==")
  let stats = summarize_tasks(TASKS)
  let remaining_hours = stats.todo * 8 + stats.active * 6 + stats.blocked * 4
  let days = forecast_days(remaining_hours)
  let velocity = recent_velocity(BURNDOWN)
  let direction = burndown_direction(BURNDOWN)
  print("remaining modeled hours:", remaining_hours)
  print("forecast days to reach", RELEASE_TARGET, "hours:", days)
  print("burndown:", direction, "velocity:", velocity, "hours/day")

fn report_incidents()
  print("== stability watch ==")
  let burden = incident_burden(INCIDENT_LOG)
  if burden.total == 0
    print("no incidents recorded")
  else
    print("incident load:", burden.total, "hours, longest:", burden.longest, "hour(s) on day", burden.worst)
  print("daily log:")
  for entry in INCIDENT_LOG
    var severity = "quiet"
    if entry.incidents == 0
      severity = "steady"
    else if entry.incidents == 1
      severity = "mild"
    else if entry.incidents == 2
      severity = "busy"
    else
      severity = "hot"
    print("  day", entry.day, "->", entry.incidents, "incident(s)", "impact:", severity)

fn main(args: List[str]) -> int
  print("=== Ratlang production dashboard ===")
  print("received", len(args), "arg(s)")
  report_tasks()
  report_forecast()
  report_incidents()
  print("args:", args)
  0
